# Generated by Django 5.2.4 on 2025-07-25 00:16

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import doctrine.models
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DocumentCategory',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nom')),
                ('slug', models.SlugField(max_length=120, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('category_type', models.CharField(choices=[('legal', 'Juridique'), ('administrative', 'Administratif'), ('technical', 'Technique'), ('regulatory', 'Réglementaire'), ('policy', 'Politique'), ('guidance', 'Guide'), ('case_study', 'Étude de cas'), ('template', 'Modèle')], default='legal', max_length=20, verbose_name='Type de catégorie')),
                ('color', models.CharField(default='#6c757d', max_length=7, verbose_name='Couleur')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='Icône')),
                ('requires_approval', models.BooleanField(default=False, verbose_name='Nécessite approbation')),
                ('default_visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Privé'), ('restricted', 'Restreint')], default='public', max_length=20, verbose_name='Visibilité par défaut')),
                ('retention_days', models.PositiveIntegerField(blank=True, null=True, verbose_name='Jours de rétention')),
                ('metadata_schema', models.JSONField(blank=True, default=dict, verbose_name='Schéma de métadonnées')),
                ('allowed_file_types', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), default=doctrine.models.default_allowed_file_types, size=None, verbose_name='Types de fichiers autorisés')),
                ('max_file_size_mb', models.PositiveIntegerField(default=50, verbose_name='Taille max fichier (MB)')),
            ],
            options={
                'verbose_name': 'Catégorie de document',
                'verbose_name_plural': 'Catégories de documents',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('first_name', models.CharField(max_length=150, verbose_name='Prénom')),
                ('last_name', models.CharField(max_length=150, verbose_name='Nom')),
                ('role', models.CharField(choices=[('admin', 'Administrateur'), ('contributor', 'Contributeur'), ('user', 'Utilisateur'), ('guest', 'Invité'), ('moderator', 'Modérateur'), ('analyst', 'Analyste')], default='user', max_length=20, verbose_name='Rôle')),
                ('status', models.CharField(choices=[('active', 'Actif'), ('inactive', 'Inactif'), ('suspended', 'Suspendu'), ('pending', 'En attente'), ('banned', 'Banni')], default='active', max_length=20, verbose_name='Statut')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='Téléphone')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('address', models.TextField(blank=True, verbose_name='Adresse')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='Ville')),
                ('country', models.CharField(blank=True, max_length=100, verbose_name='Pays')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='Code postal')),
                ('department', models.CharField(blank=True, max_length=100, verbose_name='Département')),
                ('position', models.CharField(blank=True, max_length=100, verbose_name='Poste')),
                ('employee_id', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='ID employé')),
                ('hire_date', models.DateField(blank=True, null=True, verbose_name="Date d'embauche")),
                ('salary_grade', models.CharField(blank=True, max_length=20, verbose_name='Grade salarial')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/%Y/%m/', verbose_name='Photo de profil')),
                ('preferred_language', models.CharField(choices=[('fr', 'Français'), ('en', 'English'), ('es', 'Español'), ('de', 'Deutsch')], default='fr', max_length=10, verbose_name='Langue préférée')),
                ('timezone', models.CharField(default='Europe/Paris', max_length=50, verbose_name='Fuseau horaire')),
                ('theme_preference', models.CharField(choices=[('light', 'Clair'), ('dark', 'Sombre'), ('auto', 'Automatique')], default='light', max_length=20, verbose_name='Thème préféré')),
                ('notifications_enabled', models.BooleanField(default=True, verbose_name='Notifications activées')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Notifications par email')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='Dernière IP')),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, verbose_name='Tentatives de connexion échouées')),
                ('account_locked_until', models.DateTimeField(blank=True, null=True, verbose_name="Compte verrouillé jusqu'à")),
                ('email_verified', models.BooleanField(default=False, verbose_name='Email vérifié')),
                ('email_verification_token', models.CharField(blank=True, max_length=100, verbose_name='Token de vérification email')),
                ('password_reset_token', models.CharField(blank=True, max_length=100, verbose_name='Token de réinitialisation')),
                ('password_reset_expires', models.DateTimeField(blank=True, null=True, verbose_name='Expiration token')),
                ('two_factor_enabled', models.BooleanField(default=False, verbose_name='Authentification à deux facteurs')),
                ('two_factor_secret', models.CharField(blank=True, max_length=32, verbose_name='Secret 2FA')),
                ('api_access_enabled', models.BooleanField(default=False, verbose_name='Accès API autorisé')),
                ('api_key', models.CharField(blank=True, max_length=100, null=True, unique=True, verbose_name='Clé API')),
                ('api_rate_limit', models.PositiveIntegerField(default=1000, verbose_name='Limite de taux API')),
                ('max_documents_upload', models.PositiveIntegerField(default=100, verbose_name='Limite upload documents')),
                ('storage_quota_mb', models.PositiveIntegerField(default=1000, verbose_name='Quota stockage (MB)')),
                ('current_storage_mb', models.PositiveIntegerField(default=0, verbose_name='Stockage utilisé (MB)')),
                ('bio', models.TextField(blank=True, verbose_name='Biographie')),
                ('skills', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None, verbose_name='Compétences')),
                ('interests', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None, verbose_name="Centres d'intérêt")),
                ('social_links', models.JSONField(blank=True, default=dict, verbose_name='Liens sociaux')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Métadonnées')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_members', to=settings.AUTH_USER_MODEL, verbose_name='Manager')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de suppression')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=500, verbose_name='Titre')),
                ('slug', models.SlugField(max_length=520, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('summary', models.TextField(blank=True, verbose_name='Résumé')),
                ('abstract', models.TextField(blank=True, verbose_name='Résumé exécutif')),
                ('original_filename', models.CharField(max_length=255, verbose_name='Nom de fichier original')),
                ('file_path', models.FileField(upload_to='documents/%Y/%m/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx'])], verbose_name='Fichier')),
                ('file_type', models.CharField(max_length=10, verbose_name='Type de fichier')),
                ('file_size', models.BigIntegerField(verbose_name='Taille du fichier (bytes)')),
                ('file_checksum', models.CharField(max_length=64, verbose_name='Empreinte du fichier')),
                ('mime_type', models.CharField(blank=True, max_length=100, verbose_name='Type MIME')),
                ('status', models.CharField(choices=[('draft', 'Brouillon'), ('pending', 'En attente'), ('processing', 'En traitement'), ('processed', 'Traité'), ('published', 'Publié'), ('archived', 'Archivé'), ('error', 'Erreur'), ('rejected', 'Rejeté')], default='draft', max_length=20, verbose_name='Statut')),
                ('reviewed_at', models.DateTimeField(blank=True, null=True, verbose_name='Révisé le')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='Approuvé le')),
                ('rejection_reason', models.TextField(blank=True, verbose_name='Raison du rejet')),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Privé'), ('restricted', 'Restreint'), ('confidential', 'Confidentiel'), ('secret', 'Secret')], default='public', max_length=20, verbose_name='Visibilité')),
                ('security_classification', models.CharField(blank=True, max_length=20, verbose_name='Classification sécurité')),
                ('language', models.CharField(choices=[('fr', 'Français'), ('en', 'Anglais'), ('es', 'Espagnol'), ('de', 'Allemand'), ('it', 'Italien'), ('pt', 'Portugais')], default='fr', max_length=10, verbose_name='Langue')),
                ('priority', models.CharField(choices=[('low', 'Faible'), ('normal', 'Normal'), ('high', 'Élevée'), ('urgent', 'Urgente'), ('critical', 'Critique')], default='normal', max_length=20, verbose_name='Priorité')),
                ('publication_date', models.DateField(blank=True, null=True, verbose_name='Date de publication')),
                ('effective_date', models.DateField(blank=True, null=True, verbose_name="Date d'effet")),
                ('expiration_date', models.DateField(blank=True, null=True, verbose_name="Date d'expiration")),
                ('review_date', models.DateField(blank=True, null=True, verbose_name='Date de révision')),
                ('last_modified_date', models.DateField(auto_now=True, verbose_name='Dernière modification')),
                ('legal_reference', models.CharField(blank=True, max_length=200, verbose_name='Référence légale')),
                ('regulation_number', models.CharField(blank=True, max_length=100, verbose_name='Numéro de règlement')),
                ('jurisdiction', models.CharField(blank=True, max_length=100, verbose_name='Juridiction')),
                ('legal_status', models.CharField(blank=True, max_length=50, verbose_name='Statut légal')),
                ('compliance_requirements', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None, verbose_name='Exigences de conformité')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de vues')),
                ('download_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de téléchargements')),
                ('share_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de partages')),
                ('comment_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de commentaires')),
                ('rating_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Score de notation')),
                ('rating_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de notations')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Métadonnées')),
                ('extraction_metadata', models.JSONField(blank=True, default=dict, verbose_name="Métadonnées d'extraction")),
                ('search_keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None, verbose_name='Mots-clés de recherche')),
                ('auto_generated_tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None, verbose_name='Tags générés automatiquement')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Document vedette')),
                ('is_searchable', models.BooleanField(default=True, verbose_name='Recherchable')),
                ('is_downloadable', models.BooleanField(default=True, verbose_name='Téléchargeable')),
                ('is_shareable', models.BooleanField(default=True, verbose_name='Partageable')),
                ('is_commentable', models.BooleanField(default=True, verbose_name='Commentable')),
                ('is_ratable', models.BooleanField(default=True, verbose_name='Notifiable')),
                ('requires_approval', models.BooleanField(default=False, verbose_name='Nécessite approbation')),
                ('allow_anonymous_access', models.BooleanField(default=False, verbose_name='Accès anonyme autorisé')),
                ('version', models.CharField(default='1.0', max_length=20, verbose_name='Version')),
                ('is_latest_version', models.BooleanField(default=True, verbose_name='Dernière version')),
                ('version_notes', models.TextField(blank=True, verbose_name='Notes de version')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
                ('processing_log', models.JSONField(blank=True, default=list, verbose_name='Journal de traitement')),
                ('quality_score', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Score de qualité')),
                ('access_groups', models.ManyToManyField(blank=True, to='auth.group', verbose_name="Groupes d'accès")),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_documents', to=settings.AUTH_USER_MODEL, verbose_name='Approuvé par')),
                ('authorized_users', models.ManyToManyField(blank=True, related_name='authorized_documents', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateurs autorisés')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL, verbose_name='Supprimé par')),
                ('parent_document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='doctrine.document', verbose_name='Document parent')),
                ('related_documents', models.ManyToManyField(blank=True, to='doctrine.document', verbose_name='Documents liés')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_documents', to=settings.AUTH_USER_MODEL, verbose_name='Révisé par')),
                ('supersedes', models.ManyToManyField(blank=True, related_name='superseded_by', to='doctrine.document', verbose_name='Remplace')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='uploaded_documents', to=settings.AUTH_USER_MODEL, verbose_name='Téléchargé par')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='documents', to='doctrine.documentcategory', verbose_name='Catégorie')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'ordering': ['-created_at'],
                'permissions': [('can_approve_document', 'Can approve documents'), ('can_reject_document', 'Can reject documents'), ('can_publish_document', 'Can publish documents'), ('can_access_confidential', 'Can access confidential documents')],
            },
        ),
        migrations.CreateModel(
            name='DocumentContent',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('raw_content', models.TextField(verbose_name='Contenu brut')),
                ('structured_content', models.JSONField(default=dict, verbose_name='Contenu structuré')),
                ('html_content', models.TextField(blank=True, verbose_name='Contenu HTML')),
                ('markdown_content', models.TextField(blank=True, verbose_name='Contenu Markdown')),
                ('clean_content', models.TextField(blank=True, verbose_name='Contenu nettoyé')),
                ('content_type', models.CharField(choices=[('raw_text', 'Texte brut'), ('structured', 'Structuré'), ('html', 'HTML'), ('markdown', 'Markdown'), ('json', 'JSON'), ('xml', 'XML')], default='raw_text', max_length=20, verbose_name='Type de contenu')),
                ('extraction_method', models.CharField(choices=[('automatic', 'Automatique'), ('manual', 'Manuel'), ('ocr', 'OCR'), ('hybrid', 'Hybride'), ('ai_enhanced', 'Amélioré par IA')], default='automatic', max_length=20, verbose_name="Méthode d'extraction")),
                ('processing_status', models.CharField(choices=[('pending', 'En attente'), ('processing', 'En cours'), ('completed', 'Terminé'), ('failed', 'Échec'), ('needs_review', 'Nécessite révision')], default='pending', max_length=20, verbose_name='Statut de traitement')),
                ('extraction_confidence', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name="Confiance d'extraction")),
                ('word_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de mots')),
                ('character_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de caractères')),
                ('sentence_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de phrases')),
                ('paragraph_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de paragraphes')),
                ('page_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de pages')),
                ('table_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de tableaux')),
                ('image_count', models.PositiveIntegerField(default=0, verbose_name="Nombre d'images")),
                ('entities_extracted', models.JSONField(blank=True, default=dict, verbose_name='Entités extraites')),
                ('keywords_extracted', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None, verbose_name='Mots-clés extraits')),
                ('topics_detected', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None, verbose_name='Sujets détectés')),
                ('sentiment_score', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)], verbose_name='Score de sentiment')),
                ('readability_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Score de lisibilité')),
                ('complexity_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Score de complexité')),
                ('processed_at', models.DateTimeField(blank=True, null=True, verbose_name='Traité le')),
                ('processing_duration', models.DurationField(blank=True, null=True, verbose_name='Durée de traitement')),
                ('processing_errors', models.JSONField(blank=True, default=list, verbose_name='Erreurs de traitement')),
                ('quality_checks', models.JSONField(blank=True, default=dict, verbose_name='Vérifications qualité')),
                ('encoding_detected', models.CharField(blank=True, max_length=50, verbose_name='Encodage détecté')),
                ('language_detected', models.CharField(blank=True, max_length=10, verbose_name='Langue détectée')),
                ('language_confidence', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True, verbose_name='Confiance détection langue')),
                ('document', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='content', to='doctrine.document', verbose_name='Document')),
            ],
            options={
                'verbose_name': 'Contenu de document',
                'verbose_name_plural': 'Contenus de documents',
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de suppression')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=500, verbose_name='Titre')),
                ('subtitle', models.CharField(blank=True, max_length=500, verbose_name='Sous-titre')),
                ('content', models.TextField(verbose_name='Contenu')),
                ('raw_content', models.TextField(blank=True, verbose_name='Contenu brut')),
                ('section_type', models.CharField(choices=[('heading', 'Titre'), ('paragraph', 'Paragraphe'), ('list', 'Liste'), ('table', 'Tableau'), ('image', 'Image'), ('quote', 'Citation'), ('code', 'Code'), ('footnote', 'Note de bas de page'), ('formula', 'Formule'), ('diagram', 'Diagramme')], default='paragraph', max_length=20, verbose_name='Type de section')),
                ('order_index', models.PositiveIntegerField(default=0, verbose_name='Ordre')),
                ('formatting', models.JSONField(blank=True, default=dict, verbose_name='Formatage')),
                ('css_classes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None, verbose_name='Classes CSS')),
                ('alignment', models.CharField(choices=[('left', 'Gauche'), ('center', 'Centre'), ('right', 'Droite'), ('justify', 'Justifié')], default='left', max_length=20, verbose_name='Alignement')),
                ('font_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='Taille de police')),
                ('font_weight', models.CharField(blank=True, max_length=20, verbose_name='Graisse de police')),
                ('start_page', models.PositiveIntegerField(blank=True, null=True, verbose_name='Page de début')),
                ('end_page', models.PositiveIntegerField(blank=True, null=True, verbose_name='Page de fin')),
                ('bbox_coordinates', models.JSONField(blank=True, default=dict, verbose_name='Coordonnées bounding box')),
                ('word_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de mots')),
                ('character_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de caractères')),
                ('is_highlighted', models.BooleanField(default=False, verbose_name='Mis en évidence')),
                ('is_critical', models.BooleanField(default=False, verbose_name='Critique')),
                ('requires_translation', models.BooleanField(default=False, verbose_name='Nécessite traduction')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL, verbose_name='Supprimé par')),
            ],
            options={
                'verbose_name': 'Section',
                'verbose_name_plural': 'Sections',
                'ordering': ['topic', 'order_index'],
            },
        ),
        migrations.CreateModel(
            name='Paragraph',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField(verbose_name='Contenu')),
                ('original_content', models.TextField(blank=True, verbose_name='Contenu original')),
                ('paragraph_type', models.CharField(choices=[('normal', 'Normal'), ('introduction', 'Introduction'), ('conclusion', 'Conclusion'), ('quote', 'Citation'), ('note', 'Note'), ('warning', 'Avertissement'), ('example', 'Exemple'), ('definition', 'Définition')], default='normal', max_length=20, verbose_name='Type de paragraphe')),
                ('order_index', models.PositiveIntegerField(default=0, verbose_name='Ordre')),
                ('formatting', models.JSONField(blank=True, default=dict, verbose_name='Formatage')),
                ('alignment', models.CharField(choices=[('left', 'Gauche'), ('center', 'Centre'), ('right', 'Droite'), ('justify', 'Justifié')], default='left', max_length=20, verbose_name='Alignement')),
                ('indentation', models.PositiveIntegerField(default=0, verbose_name='Indentation')),
                ('entities', models.JSONField(blank=True, default=dict, verbose_name='Entités')),
                ('keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None, verbose_name='Mots-clés')),
                ('concepts', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None, verbose_name='Concepts')),
                ('named_entities', models.JSONField(blank=True, default=dict, verbose_name='Entités nommées')),
                ('word_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de mots')),
                ('sentence_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de phrases')),
                ('readability_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Score de lisibilité')),
                ('is_key_paragraph', models.BooleanField(default=False, verbose_name='Paragraphe clé')),
                ('requires_review', models.BooleanField(default=False, verbose_name='Nécessite révision')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paragraphs', to='doctrine.section', verbose_name='Section')),
            ],
            options={
                'verbose_name': 'Paragraphe',
                'verbose_name_plural': 'Paragraphes',
                'ordering': ['section', 'order_index'],
            },
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=500, verbose_name='Titre')),
                ('caption', models.TextField(blank=True, verbose_name='Légende')),
                ('table_type', models.CharField(choices=[('data', 'Données'), ('financial', 'Financier'), ('comparison', 'Comparaison'), ('schedule', 'Planning'), ('reference', 'Référence'), ('matrix', 'Matrice'), ('summary', 'Résumé')], default='data', max_length=20, verbose_name='Type de tableau')),
                ('headers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), default=list, size=None, verbose_name='En-têtes')),
                ('data', models.JSONField(default=dict, verbose_name='Données')),
                ('raw_data', models.JSONField(blank=True, default=dict, verbose_name='Données brutes')),
                ('processed_data', models.JSONField(blank=True, default=dict, verbose_name='Données traitées')),
                ('row_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de lignes')),
                ('column_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de colonnes')),
                ('order_index', models.PositiveIntegerField(default=0, verbose_name='Ordre')),
                ('extraction_confidence', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=5, verbose_name="Confiance d'extraction")),
                ('extraction_method', models.CharField(blank=True, max_length=50, verbose_name="Méthode d'extraction")),
                ('bbox_coordinates', models.JSONField(blank=True, default=dict, verbose_name='Coordonnées')),
                ('styling', models.JSONField(blank=True, default=dict, verbose_name='Style')),
                ('borders', models.JSONField(blank=True, default=dict, verbose_name='Bordures')),
                ('column_widths', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, default=list, size=None, verbose_name='Largeurs de colonnes')),
                ('has_header_row', models.BooleanField(default=True, verbose_name="Ligne d'en-tête")),
                ('has_totals_row', models.BooleanField(default=False, verbose_name='Ligne de totaux')),
                ('is_transposed', models.BooleanField(default=False, verbose_name='Transposé')),
                ('is_complex', models.BooleanField(default=False, verbose_name='Complexe')),
            ],
            options={
                'verbose_name': 'Tableau',
                'verbose_name_plural': 'Tableaux',
                'ordering': ['order_index'],
                'indexes': [models.Index(fields=['order_index'], name='doctrine_ta_order_i_75b701_idx'), models.Index(fields=['table_type'], name='doctrine_ta_table_t_3b2c5b_idx')],
            },
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de suppression')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Nom')),
                ('slug', models.SlugField(max_length=220, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='Code')),
                ('theme_type', models.CharField(choices=[('category', 'Catégorie'), ('subcategory', 'Sous-catégorie'), ('tag', 'Tag'), ('domain', 'Domaine'), ('jurisdiction', 'Juridiction')], default='category', max_length=20, verbose_name='Type de thème')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='Icône')),
                ('color', models.CharField(default='#007bff', max_length=7, verbose_name='Couleur')),
                ('background_color', models.CharField(default='#ffffff', max_length=7, verbose_name='Couleur de fond')),
                ('text_color', models.CharField(default='#000000', max_length=7, verbose_name='Couleur du texte')),
                ('order_index', models.PositiveIntegerField(default=0, verbose_name="Ordre d'affichage")),
                ('level', models.PositiveIntegerField(default=1, verbose_name='Niveau hiérarchique')),
                ('path', models.CharField(blank=True, max_length=500, verbose_name='Chemin hiérarchique')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Mis en avant')),
                ('is_public', models.BooleanField(default=True, verbose_name='Public')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Métadonnées')),
                ('keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None, verbose_name='Mots-clés')),
                ('aliases', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None, verbose_name='Alias')),
                ('documents_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de documents')),
                ('views_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de vues')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_themes', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL, verbose_name='Supprimé par')),
                ('managed_by', models.ManyToManyField(blank=True, related_name='managed_themes', to=settings.AUTH_USER_MODEL, verbose_name='Géré par')),
                ('parent_theme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='doctrine.theme', verbose_name='Thème parent')),
            ],
            options={
                'verbose_name': 'Thème',
                'verbose_name_plural': 'Thèmes',
                'ordering': ['level', 'order_index', 'name'],
            },
        ),
        migrations.AddField(
            model_name='document',
            name='theme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='documents', to='doctrine.theme', verbose_name='Thème'),
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de suppression')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=500, verbose_name='Titre')),
                ('slug', models.SlugField(max_length=520, verbose_name='Slug')),
                ('content', models.TextField(verbose_name='Contenu')),
                ('summary', models.TextField(blank=True, verbose_name='Résumé')),
                ('topic_type', models.CharField(choices=[('chapter', 'Chapitre'), ('section', 'Section'), ('subsection', 'Sous-section'), ('article', 'Article'), ('paragraph', 'Paragraphe'), ('appendix', 'Annexe'), ('introduction', 'Introduction'), ('conclusion', 'Conclusion')], default='section', max_length=20, verbose_name='Type de sujet')),
                ('order_index', models.PositiveIntegerField(default=0, verbose_name='Ordre')),
                ('level', models.PositiveIntegerField(default=1, verbose_name='Niveau hiérarchique')),
                ('numbering', models.CharField(blank=True, max_length=50, verbose_name='Numérotation')),
                ('start_page', models.PositiveIntegerField(blank=True, null=True, verbose_name='Page de début')),
                ('end_page', models.PositiveIntegerField(blank=True, null=True, verbose_name='Page de fin')),
                ('start_position', models.PositiveIntegerField(blank=True, null=True, verbose_name='Position de début')),
                ('end_position', models.PositiveIntegerField(blank=True, null=True, verbose_name='Position de fin')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Métadonnées')),
                ('keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None, verbose_name='Mots-clés')),
                ('entities', models.JSONField(blank=True, default=dict, verbose_name='Entités')),
                ('concepts', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None, verbose_name='Concepts')),
                ('word_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de mots')),
                ('reading_time_minutes', models.PositiveIntegerField(default=0, verbose_name='Temps de lecture (min)')),
                ('importance_score', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name="Score d'importance")),
                ('is_highlighted', models.BooleanField(default=False, verbose_name='Mis en évidence')),
                ('is_key_section', models.BooleanField(default=False, verbose_name='Section clé')),
                ('requires_attention', models.BooleanField(default=False, verbose_name='Nécessite attention')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL, verbose_name='Supprimé par')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='doctrine.document', verbose_name='Document')),
                ('parent_topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subtopics', to='doctrine.topic', verbose_name='Topic parent')),
            ],
            options={
                'verbose_name': 'Sujet',
                'verbose_name_plural': 'Sujets',
                'ordering': ['document', 'order_index'],
            },
        ),
        migrations.AddField(
            model_name='section',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='doctrine.topic', verbose_name='Sujet'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='doctrine_us_email_20c2ea_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role', 'status'], name='doctrine_us_role_d0f6aa_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='doctrine_us_created_9f7503_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['department', 'position'], name='doctrine_us_departm_5b4f7a_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['manager'], name='doctrine_us_manager_1cdcde_idx'),
        ),
        migrations.AddIndex(
            model_name='documentcontent',
            index=models.Index(fields=['processing_status'], name='doctrine_do_process_97e7cd_idx'),
        ),
        migrations.AddIndex(
            model_name='documentcontent',
            index=models.Index(fields=['extraction_method', 'processing_status'], name='doctrine_do_extract_0a34c5_idx'),
        ),
        migrations.AddIndex(
            model_name='paragraph',
            index=models.Index(fields=['section', 'order_index'], name='doctrine_pa_section_8b83d0_idx'),
        ),
        migrations.AddIndex(
            model_name='paragraph',
            index=models.Index(fields=['paragraph_type'], name='doctrine_pa_paragra_4e6a02_idx'),
        ),
        migrations.AddIndex(
            model_name='theme',
            index=models.Index(fields=['slug'], name='doctrine_th_slug_a3070e_idx'),
        ),
        migrations.AddIndex(
            model_name='theme',
            index=models.Index(fields=['code'], name='doctrine_th_code_01b816_idx'),
        ),
        migrations.AddIndex(
            model_name='theme',
            index=models.Index(fields=['theme_type', 'is_active'], name='doctrine_th_theme_t_0d49bc_idx'),
        ),
        migrations.AddIndex(
            model_name='theme',
            index=models.Index(fields=['parent_theme', 'order_index'], name='doctrine_th_parent__147c34_idx'),
        ),
        migrations.AddIndex(
            model_name='theme',
            index=models.Index(fields=['is_active', 'is_public'], name='doctrine_th_is_acti_b2e6ce_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['slug'], name='doctrine_do_slug_1ae063_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['status', 'visibility'], name='doctrine_do_status_06b43e_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['theme', 'category'], name='doctrine_do_theme_i_296d8a_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['uploaded_by', 'created_at'], name='doctrine_do_uploade_5f876d_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['language', 'is_searchable'], name='doctrine_do_languag_a68a5d_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['publication_date', 'effective_date'], name='doctrine_do_publica_d2b6c6_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['is_featured', 'status'], name='doctrine_do_is_feat_a125f2_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['priority', 'status'], name='doctrine_do_priorit_c49e7d_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='doctrine_do_search__9ad4b0_gin'),
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(fields=['document', 'order_index'], name='doctrine_to_documen_3d3a3d_idx'),
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(fields=['parent_topic', 'order_index'], name='doctrine_to_parent__ceda5b_idx'),
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(fields=['slug'], name='doctrine_to_slug_5b1dd1_idx'),
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(fields=['topic_type', 'level'], name='doctrine_to_topic_t_e14aaa_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='topic',
            unique_together={('document', 'slug')},
        ),
        migrations.AddIndex(
            model_name='section',
            index=models.Index(fields=['topic', 'order_index'], name='doctrine_se_topic_i_854477_idx'),
        ),
        migrations.AddIndex(
            model_name='section',
            index=models.Index(fields=['section_type'], name='doctrine_se_section_cf1ee5_idx'),
        ),
        migrations.AddIndex(
            model_name='section',
            index=models.Index(fields=['start_page', 'end_page'], name='doctrine_se_start_p_5b133a_idx'),
        ),
    ]
