#!/bin/bash

# ==========================================
# Script de d√©marrage pour DGI-EXTRACTOR
# Avec configuration Celery compl√®te
# ==========================================

set -e  # Arr√™ter le script en cas d'erreur

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="DGI-EXTRACTOR"
PROJECT_DIR="/Users/krohn/PycharmProjects/DME-AGENTS/dgi-extractor"
VENV_PATH="$PROJECT_DIR/venv"
LOG_DIR="$PROJECT_DIR/logs"
PID_DIR="$PROJECT_DIR/pids"

# Ports par d√©faut
DJANGO_PORT=${DJANGO_PORT:-8000}
CELERY_FLOWER_PORT=${CELERY_FLOWER_PORT:-5555}

# Redis configuration
REDIS_HOST=${REDIS_HOST:-"37.60.239.221"}
REDIS_PORT=${REDIS_PORT:-6379}
REDIS_DB=${REDIS_DB:-1}

echo -e "${BLUE}=========================================${NC}"
echo -e "${BLUE}D√©marrage de $PROJECT_NAME${NC}"
echo -e "${BLUE}=========================================${NC}"

# Fonction pour afficher les logs
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Fonction de nettoyage
cleanup() {
    log_info "Nettoyage des processus..."

    # Arr√™ter les processus Celery
    if [ -f "$PID_DIR/celery_worker.pid" ]; then
        if kill -0 $(cat "$PID_DIR/celery_worker.pid") 2>/dev/null; then
            kill $(cat "$PID_DIR/celery_worker.pid")
            log_info " Celery Worker arr√™t√©"
        fi
        rm -f "$PID_DIR/celery_worker.pid"
    fi

    if [ -f "$PID_DIR/celery_beat.pid" ]; then
        if kill -0 $(cat "$PID_DIR/celery_beat.pid") 2>/dev/null; then
            kill $(cat "$PID_DIR/celery_beat.pid")
            log_info " Celery Beat arr√™t√©"
        fi
        rm -f "$PID_DIR/celery_beat.pid"
    fi

    if [ -f "$PID_DIR/flower.pid" ]; then
        if kill -0 $(cat "$PID_DIR/flower.pid") 2>/dev/null; then
            kill $(cat "$PID_DIR/flower.pid")
            log_info " Flower arr√™t√©"
        fi
        rm -f "$PID_DIR/flower.pid"
    fi

    # Arr√™ter Django si lanc√© par ce script
    if [ -f "$PID_DIR/django.pid" ]; then
        if kill -0 $(cat "$PID_DIR/django.pid") 2>/dev/null; then
            kill $(cat "$PID_DIR/django.pid")
            log_info " Django arr√™t√©"
        fi
        rm -f "$PID_DIR/django.pid"
    fi

    log_info "üèÅ Nettoyage termin√©"
}

# Gestion du signal SIGINT (Ctrl+C)
trap cleanup SIGINT SIGTERM

# Fonction de v√©rification des pr√©requis
check_prerequisites() {
    log_info "üîç V√©rification des pr√©requis..."

    # V√©rifier que le r√©pertoire du projet existe
    if [ ! -d "$PROJECT_DIR" ]; then
        log_error "R√©pertoire du projet introuvable: $PROJECT_DIR"
        exit 1
    fi

    cd "$PROJECT_DIR"

    # V√©rifier l'environnement virtuel
    if [ ! -d "$VENV_PATH" ]; then
        log_warn "Environnement virtuel introuvable. Cr√©ation..."
        python3 -m venv "$VENV_PATH"
    fi

    # Activer l'environnement virtuel
    source "$VENV_PATH/bin/activate"

    # V√©rifier Python
    if ! command -v python &> /dev/null; then
        log_error "Python non trouv√© dans l'environnement virtuel"
        exit 1
    fi

    # V√©rifier les d√©pendances critiques
    python -c "import django" 2>/dev/null || {
        log_error "Django non install√©. Installation des d√©pendances..."
        pip install -r requirements.txt
    }

    python -c "import celery" 2>/dev/null || {
        log_error "Celery non install√©"
        exit 1
    }

    # V√©rifier Redis
    log_info "üîó V√©rification de la connexion Redis..."
    python -c "
import redis
try:
    r = redis.Redis(host='$REDIS_HOST', port=$REDIS_PORT, db=$REDIS_DB)
    r.ping()
    print(' Redis connect√©')
except Exception as e:
    print(f' Erreur Redis: {e}')
    exit(1)
" || exit 1

    log_info " Pr√©requis v√©rifi√©s"
}

# Cr√©er les r√©pertoires n√©cessaires
create_directories() {
    log_info " Cr√©ation des r√©pertoires..."

    mkdir -p "$LOG_DIR"
    mkdir -p "$PID_DIR"

    # Cr√©er le r√©pertoire pour les m√©dias si n√©cessaire
    mkdir -p "$PROJECT_DIR/media"
    mkdir -p "$PROJECT_DIR/static"

    log_info " R√©pertoires cr√©√©s"
}

# Pr√©parer Django
setup_django() {
    log_info "üîß Configuration Django..."

    # Variables d'environnement Django
    export DJANGO_SETTINGS_MODULE="core.settings"

    # Migrations
    log_info " Application des migrations..."
    python manage.py makemigrations --noinput
    python manage.py migrate --noinput

    # Collecte des fichiers statiques
    log_info " Collecte des fichiers statiques..."
    python manage.py collectstatic --noinput --clear

    # V√©rifier la configuration
    log_info "üß™ V√©rification de la configuration Django..."
    python manage.py check --deploy

    log_info " Django configur√©"
}

# D√©marrer Celery Worker
start_celery_worker() {
    log_info " D√©marrage Celery Worker..."

    celery -A core worker \
        --loglevel=info \
        --concurrency=4 \
        --max-tasks-per-child=1000 \
        --time-limit=7200 \
        --soft-time-limit=3600 \
        --pidfile="$PID_DIR/celery_worker.pid" \
        --logfile="$LOG_DIR/celery_worker.log" \
        --detach

    # V√©rifier que le worker a d√©marr√©
    sleep 3
    if [ -f "$PID_DIR/celery_worker.pid" ] && kill -0 $(cat "$PID_DIR/celery_worker.pid") 2>/dev/null; then
        log_info " Celery Worker d√©marr√© (PID: $(cat "$PID_DIR/celery_worker.pid"))"
    else
        log_error " √âchec du d√©marrage Celery Worker"
        exit 1
    fi
}

# D√©marrer Celery Beat (scheduler)
start_celery_beat() {
    log_info " D√©marrage Celery Beat..."

    celery -A core beat \
        --loglevel=info \
        --pidfile="$PID_DIR/celery_beat.pid" \
        --logfile="$LOG_DIR/celery_beat.log" \
        --schedule="$PROJECT_DIR/celerybeat-schedule" \
        --detach

    # V√©rifier que beat a d√©marr√©
    sleep 2
    if [ -f "$PID_DIR/celery_beat.pid" ] && kill -0 $(cat "$PID_DIR/celery_beat.pid") 2>/dev/null; then
        log_info " Celery Beat d√©marr√© (PID: $(cat "$PID_DIR/celery_beat.pid"))"
    else
        log_error " √âchec du d√©marrage Celery Beat"
        exit 1
    fi
}

# D√©marrer Flower (monitoring Celery)
start_flower() {
    log_info " D√©marrage Flower (monitoring Celery)..."

    celery -A core flower \
        --port=$CELERY_FLOWER_PORT \
        --pidfile="$PID_DIR/flower.pid" \
        --logfile="$LOG_DIR/flower.log" \
        --detach

    # V√©rifier que flower a d√©marr√©
    sleep 2
    if [ -f "$PID_DIR/flower.pid" ] && kill -0 $(cat "$PID_DIR/flower.pid") 2>/dev/null; then
        log_info " Flower d√©marr√© sur http://localhost:$CELERY_FLOWER_PORT (PID: $(cat "$PID_DIR/flower.pid"))"
    else
        log_warn "‚ö†  Flower n'a pas pu d√©marrer (optionnel)"
    fi
}

# D√©marrer Django
start_django() {
    log_info " D√©marrage du serveur Django..."

    python manage.py runserver 0.0.0.0:$DJANGO_PORT \
        > "$LOG_DIR/django.log" 2>&1 &

    DJANGO_PID=$!
    echo $DJANGO_PID > "$PID_DIR/django.pid"

    # Attendre que Django d√©marre
    sleep 3

    # V√©rifier que Django r√©pond
    if curl -f http://localhost:$DJANGO_PORT/admin/ &>/dev/null; then
        log_info " Django d√©marr√© sur http://localhost:$DJANGO_PORT (PID: $DJANGO_PID)"
    else
        log_warn "  Django en cours de d√©marrage... V√©rifiez les logs si n√©cessaire"
    fi
}

# Afficher le statut des services
show_status() {
    echo -e "\n${BLUE}=========================================${NC}"
    echo -e "${BLUE} STATUT DES SERVICES${NC}"
    echo -e "${BLUE}=========================================${NC}"

    # Django
    if [ -f "$PID_DIR/django.pid" ] && kill -0 $(cat "$PID_DIR/django.pid") 2>/dev/null; then
        echo -e "${GREEN} Django${NC} - http://localhost:$DJANGO_PORT (PID: $(cat "$PID_DIR/django.pid"))"
    else
        echo -e "${RED} Django${NC} - Non d√©marr√©"
    fi

    # Celery Worker
    if [ -f "$PID_DIR/celery_worker.pid" ] && kill -0 $(cat "$PID_DIR/celery_worker.pid") 2>/dev/null; then
        echo -e "${GREEN} Celery Worker${NC} (PID: $(cat "$PID_DIR/celery_worker.pid"))"
    else
        echo -e "${RED} Celery Worker${NC} - Non d√©marr√©"
    fi

    # Celery Beat
    if [ -f "$PID_DIR/celery_beat.pid" ] && kill -0 $(cat "$PID_DIR/celery_beat.pid") 2>/dev/null; then
        echo -e "${GREEN} Celery Beat${NC} (PID: $(cat "$PID_DIR/celery_beat.pid"))"
    else
        echo -e "${RED} Celery Beat${NC} - Non d√©marr√©"
    fi

    # Flower
    if [ -f "$PID_DIR/flower.pid" ] && kill -0 $(cat "$PID_DIR/flower.pid") 2>/dev/null; then
        echo -e "${GREEN} Flower${NC} - http://localhost:$CELERY_FLOWER_PORT (PID: $(cat "$PID_DIR/flower.pid"))"
    else
        echo -e "${YELLOW}Ô∏è  Flower${NC} - Non d√©marr√© (optionnel)"
    fi

    echo -e "\n${BLUE} FICHIERS IMPORTANTS:${NC}"
    echo -e "   Logs: $LOG_DIR/"
    echo -e "   PIDs: $PID_DIR/"
    echo -e "   Projet: $PROJECT_DIR"

    echo -e "\n${BLUE}üîó URLS UTILES:${NC}"
    echo -e "    Application: http://localhost:$DJANGO_PORT"
    echo -e "    API Documentation: http://localhost:$DJANGO_PORT/api/docs/"
    echo -e "    Admin Django: http://localhost:$DJANGO_PORT/admin/"
    echo -e "    Flower (Celery): http://localhost:$CELERY_FLOWER_PORT"
    echo -e "    RAG Endpoints:"
    echo -e "      ‚Ä¢ POST /api/v1/processing/rag/query/ (RAG multimode)"
    echo -e "      ‚Ä¢ POST /api/v1/processing/rag/generate/ (G√©n√©ration HF)"
    echo -e "      ‚Ä¢ POST /api/v1/processing/rag/chat/completions/ (Chat OpenAI-like)"
    echo -e "      ‚Ä¢ GET /api/v1/public/all-extracted-content/ (Contenu public)"

    echo -e "\n${YELLOW} COMMANDES UTILES:${NC}"
    echo -e "   Arr√™ter: Ctrl+C ou kill \$(cat $PID_DIR/*.pid)"
    echo -e "   Logs en temps r√©el: tail -f $LOG_DIR/*.log"
    echo -e "   Restart Celery: ./start_app.sh restart-celery"
}

# Fonction pour red√©marrer seulement Celery
restart_celery() {
    log_info " Red√©marrage des services Celery..."

    # Arr√™ter Celery
    if [ -f "$PID_DIR/celery_worker.pid" ]; then
        kill $(cat "$PID_DIR/celery_worker.pid") 2>/dev/null || true
        rm -f "$PID_DIR/celery_worker.pid"
    fi

    if [ -f "$PID_DIR/celery_beat.pid" ]; then
        kill $(cat "$PID_DIR/celery_beat.pid") 2>/dev/null || true
        rm -f "$PID_DIR/celery_beat.pid"
    fi

    if [ -f "$PID_DIR/flower.pid" ]; then
        kill $(cat "$PID_DIR/flower.pid") 2>/dev/null || true
        rm -f "$PID_DIR/flower.pid"
    fi

    sleep 2

    # Red√©marrer
    start_celery_worker
    start_celery_beat
    start_flower

    log_info " Services Celery red√©marr√©s"
}

# Gestion des arguments
case "${1:-start}" in
    "start")
        # D√©marrage complet
        check_prerequisites
        create_directories
        setup_django
        start_celery_worker
        start_celery_beat
        start_flower
        start_django
        show_status

        echo -e "\n${GREEN} $PROJECT_NAME d√©marr√© avec succ√®s !${NC}"
        echo -e "${YELLOW}Appuyez sur Ctrl+C pour arr√™ter tous les services${NC}\n"

        # Garder le script en vie et surveiller les processus
        while true; do
            sleep 10

            # V√©rifier que les processus critiques sont toujours en vie
            if [ -f "$PID_DIR/django.pid" ] && ! kill -0 $(cat "$PID_DIR/django.pid") 2>/dev/null; then
                log_error "Django s'est arr√™t√© de mani√®re inattendue"
                break
            fi

            if [ -f "$PID_DIR/celery_worker.pid" ] && ! kill -0 $(cat "$PID_DIR/celery_worker.pid") 2>/dev/null; then
                log_error "Celery Worker s'est arr√™t√© de mani√®re inattendue"
                break
            fi
        done
        ;;

    "stop")
        log_info " Arr√™t de $PROJECT_NAME..."
        cleanup
        ;;

    "restart")
        log_info " Red√©marrage de $PROJECT_NAME..."
        cleanup
        sleep 2
        exec "$0" start
        ;;

    "restart-celery")
        cd "$PROJECT_DIR"
        source "$VENV_PATH/bin/activate"
        restart_celery
        ;;

    "status")
        show_status
        ;;

    "logs")
        echo -e "${BLUE} Logs en temps r√©el (Ctrl+C pour quitter):${NC}"
        tail -f "$LOG_DIR"/*.log
        ;;

    *)
        echo "Usage: $0 {start|stop|restart|restart-celery|status|logs}"
        echo ""
        echo "  start         - D√©marre tous les services"
        echo "  stop          - Arr√™te tous les services"
        echo "  restart       - Red√©marre tous les services"
        echo "  restart-celery- Red√©marre seulement Celery"
        echo "  status        - Affiche le statut des services"
        echo "  logs          - Affiche les logs en temps r√©el"
        exit 1
        ;;
esac