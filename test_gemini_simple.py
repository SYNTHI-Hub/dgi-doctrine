#!/usr/bin/env python3
"""
Test simple de Gemini pour valider l'impl√©mentation
"""

import os

try:
    import google.generativeai as genai
    print("‚úÖ Google Generative AI disponible")
    GEMINI_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Google Generative AI non disponible: {e}")
    GEMINI_AVAILABLE = False

def test_gemini_simple():
    """Test simple de Gemini"""

    if not GEMINI_AVAILABLE:
        print("‚ùå Gemini non disponible")
        return False

    # R√©cup√©rer la cl√© API
    api_key = os.getenv('GOOGLE_AI_API_KEY', 'AIzaSyDozWBNuhVS_zHE6ZeQ-NgVODQCwmsOCbM')

    if not api_key or api_key == '':
        print("‚ùå Cl√© API Google manquante")
        return False

    try:
        # Configuration de Gemini
        genai.configure(api_key=api_key)

        # Test simple
        model = genai.GenerativeModel('gemini-pro')

        # Test de g√©n√©ration simple
        context = """
        Document 1: Politique de s√©curit√© informatique
        Cette politique d√©finit les r√®gles de s√©curit√© pour prot√©ger les donn√©es et syst√®mes.

        Document 2: Proc√©dures de sauvegarde
        Les sauvegardes doivent √™tre effectu√©es quotidiennement selon les proc√©dures √©tablies.
        """

        query = "Quelles sont les exigences de s√©curit√© ?"

        prompt = f"""En tant qu'assistant AI, r√©ponds √† la question suivante en te basant sur le contexte fourni.

Contexte:
{context}

Question: {query}

Instructions:
- R√©ponds en fran√ßais
- Base ta r√©ponse uniquement sur les informations du contexte
- Sois pr√©cis et concis

R√©ponse:"""

        print("üß™ Test de g√©n√©ration Gemini...")
        response = model.generate_content(prompt)

        if response.text:
            print(f"‚úÖ R√©ponse g√©n√©r√©e ({len(response.text)} caract√®res):")
            print(f"'{response.text[:200]}{'...' if len(response.text) > 200 else ''}'")
            return True
        else:
            print("‚ùå Aucune r√©ponse g√©n√©r√©e")
            return False

    except Exception as e:
        print(f"‚ùå Erreur lors du test Gemini: {str(e)}")
        return False

def test_text_search_simulation():
    """Simule la recherche textuelle dans document_content"""

    print("\nüß™ Test de simulation de recherche textuelle...")

    # Simuler des contenus de documents
    mock_documents = [
        {
            'id': 1,
            'clean_content': 'Politique de s√©curit√© informatique. Cette politique d√©finit les r√®gles pour prot√©ger les donn√©es sensibles et assurer la s√©curit√© des syst√®mes.',
            'document': {
                'id': 1,
                'title': 'Politique de s√©curit√©',
                'original_filename': 'security_policy.pdf'
            }
        },
        {
            'id': 2,
            'clean_content': 'Proc√©dures de sauvegarde. Les sauvegardes doivent √™tre effectu√©es quotidiennement pour assurer la continuit√© des services.',
            'document': {
                'id': 2,
                'title': 'Proc√©dures de sauvegarde',
                'original_filename': 'backup_procedures.pdf'
            }
        }
    ]

    query = "politique de s√©curit√©"
    query_terms = query.lower().split()

    # Simuler la recherche
    results = []
    for doc in mock_documents:
        content_lower = doc['clean_content'].lower()

        # V√©rifier si un terme de recherche est pr√©sent
        found = any(term in content_lower for term in query_terms)

        if found:
            # Extraire un extrait pertinent
            excerpt = extract_relevant_excerpt(doc['clean_content'], query)
            score = calculate_text_relevance(excerpt, query)

            result = {
                'text': excerpt,
                'score': score,
                'source': 'document_content',
                'document': doc['document']
            }
            results.append(result)

    print(f"‚úÖ Recherche simul√©e: {len(results)} r√©sultats trouv√©s")
    for i, result in enumerate(results):
        print(f"  {i+1}. Score: {result['score']:.3f} - {result['document']['title']}")
        print(f"     Extrait: '{result['text'][:100]}....'")

    return results

def extract_relevant_excerpt(text, query, max_length=200):
    """Extrait un extrait pertinent du texte"""
    if not text:
        return ""

    query_terms = [term.lower() for term in query.split()]
    text_lower = text.lower()

    # Trouver la premi√®re occurrence d'un terme
    best_position = 0
    for term in query_terms:
        pos = text_lower.find(term)
        if pos != -1:
            best_position = max(0, pos - 50)
            break

    # Extraire l'extrait
    excerpt = text[best_position:best_position + max_length]

    if best_position > 0:
        excerpt = "..." + excerpt
    if len(text) > best_position + max_length:
        excerpt = excerpt + "..."

    return excerpt.strip()

def calculate_text_relevance(text, query):
    """Calcule un score de pertinence simple"""
    query_terms = [term.lower() for term in query.split()]
    text_lower = text.lower()

    score = 0.0
    text_words = text_lower.split()

    for term in query_terms:
        count = text_lower.count(term)
        score += count / len(text_words) if text_words else 0

    return min(1.0, score * 10)

if __name__ == '__main__':
    print("=== Test du syst√®me RAG avec Gemini en priorit√© et Hugging Face en fallback ===")

    # Test 1: Disponibilit√© de Gemini
    print("\n1. Test de disponibilit√© de Gemini...")
    gemini_ok = test_gemini_simple()

    # Test 2: Simulation de recherche textuelle
    print("\n2. Test de recherche textuelle...")
    search_results = test_text_search_simulation()

    # Test 3: Combinaison des deux (si Gemini disponible)
    if gemini_ok and search_results:
        print("\n3. Test de combinaison recherche + g√©n√©ration...")

        # Construire le contexte
        context_parts = []
        for i, result in enumerate(search_results[:2]):
            doc_title = result['document']['title']
            text = result['text']
            context_parts.append(f"## Document {i+1}: {doc_title}\n{text}")

        context = "\n\n".join(context_parts)
        query = "Quelles sont les principales exigences de s√©curit√© ?"

        # Test avec Gemini
        try:
            model = genai.GenerativeModel('gemini-pro')
            prompt = f"""En tant qu'assistant AI, r√©ponds √† la question suivante en te basant sur le contexte fourni.

Contexte:
{context}

Question: {query}

Instructions:
- R√©ponds en fran√ßais
- Base ta r√©ponse uniquement sur les informations du contexte
- Sois pr√©cis et concis

R√©ponse:"""

            response = model.generate_content(prompt)

            if response.text:
                print(f"‚úÖ R√©ponse combin√©e g√©n√©r√©e:")
                print(f"'{response.text}'")
            else:
                print("‚ùå Aucune r√©ponse combin√©e g√©n√©r√©e")

        except Exception as e:
            print(f"‚ùå Erreur test combin√©: {str(e)}")

    print("\n=== Fin des tests ===")